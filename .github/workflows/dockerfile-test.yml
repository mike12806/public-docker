name: docker-build-verification

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  dockerfile-discovery:
    name: discover
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.find-paths.outputs.paths }}
      has_dockerfiles: ${{ steps.check.outputs.has_dockerfiles }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Find Dockerfile paths
        id: find-paths
        run: |
          paths=$(find Dockerfiles -name Dockerfile -type f | jq -R -s -c 'split("\n")[:-1]')
          echo "paths=$paths" >> $GITHUB_OUTPUT

      - name: Check if any dockerfiles
        id: check
        run: |
          if [[ $(jq length <<<"${{ steps.find-paths.outputs.paths }}") -gt 0 ]]; then
            echo "has_dockerfiles=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfiles=false" >> $GITHUB_OUTPUT
          fi

  test-docker-build:
    name: build-test
    needs: dockerfile-discovery
    if: needs.dockerfile-discovery.outputs.has_dockerfiles == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.dockerfile-discovery.outputs.paths) }}
      fail-fast: false
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get image name
        id: image-name
        run: |
          name=$(dirname "${{ matrix.dockerfile }}" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Get context path
        id: context_path
        run: |
          context_path=$(dirname "${{ matrix.dockerfile }}")
          echo "path=$context_path" >> $GITHUB_OUTPUT

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: "${{ github.workspace }}/${{ steps.context_path.outputs.path }}"
          file: "${{ github.workspace }}/${{ matrix.dockerfile }}"
          push: false
          load: true
          tags: "test-${{ steps.image-name.outputs.name }}:${{ github.sha }}"

      - name: Smoke test: container runs with default command or shell
        run: |
          image_tag="test-${{ steps.image-name.outputs.name }}:${{ github.sha }}"
          if [[ "${{ matrix.dockerfile }}" == *"Runner"* ]]; then
            docker run --rm "$image_tag" python3 --version
            exit $?
          fi
          docker run --rm --entrypoint /bin/sh "$image_tag" -c "ls /"
          result=$?
          if [ $result -eq 0 ]; then
            exit 0
          fi
          if [ $result -eq 127 ]; then
            echo "No shell found, running default entrypoint with timeout (for scratch/minimal images)..."
            timeout 10 docker run --rm "$image_tag"
            result=$?
            if [ $result -eq 124 ]; then
              echo "Container hung (timeout)."
              exit 1
            fi
            if [ $result -ne 0 ]; then
              echo "Container failed to start or exited with error."
              exit 1
            fi
            exit 0
          fi
          echo "Container test failed."
          exit 1

