name: Build and Publish Runner Image

on:
  schedule:
    - cron: '0 14 */2 * *' # 2 PM UTC every other day
  push:
    branches:
      - main
    paths:
      - 'Dockerfiles/Runner/Dockerfile'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gh_hdc-runner
  FULL_IMAGE_NAME: ${{ github.repository_owner }}/public-docker/gh_hdc-runner

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          create_annotated_tag: true
          tag_prefix: v

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FULL_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.tag_version.outputs.new_version }}
            type=sha,format=long

      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: Dockerfiles/Runner
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,new=true
          provenance: true

      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: |
            {
              "template": "## What's Changed\n\n${UNCATEGORIZED}\n\n## Docker Image Details\n- Image: `${{ env.REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:${{ steps.tag_version.outputs.new_version }}`\n- Latest tag: `${{ env.REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:latest`\n- Git SHA: `${{ github.sha }}`",
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": ["fix", "bug"]
                },
                {
                  "title": "## üìù Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## üîÑ Dependencies",
                  "labels": ["dependencies", "dependency"]
                },
                {
                  "title": "## üõ† Maintenance",
                  "labels": ["maintenance", "chore"]
                },
                {
                  "title": "## Other Changes",
                  "labels": []
                }
              ],
              "ignore_labels": ["duplicate", "invalid", "question", "wontfix"]
            }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_version }}
          body: ${{ steps.github_release.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Output info to logs
      - name: Show Release Info
        run: |
          echo "Version: ${{ steps.tag_version.outputs.new_version }}"
          echo "Tag: ${{ steps.tag_version.outputs.new_tag }}"
          echo "Docker Image: ${{ env.REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:${{ steps.tag_version.outputs.new_version }}"
