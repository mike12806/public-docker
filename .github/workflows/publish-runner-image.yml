name: Build and Publish Docker Images

on:
  schedule:
    - cron: '0 */4 * * *'
  push:
    branches:
      - main
    paths:
      - '**/Dockerfile'
  pull_request:
    paths:
      - '**/Dockerfile'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  discover-changed-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Find changed Dockerfiles
        id: changed
        run: |
          # Find changed Dockerfiles compared to main (for PRs) or last commit (for pushes)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base_ref="${{ github.event.pull_request.base.sha }}"
          else
            base_ref="HEAD~1"
          fi
          files=$(git diff --name-only $base_ref | grep -E 'Dockerfile$' || true)
          # If empty, fallback to current Dockerfiles for scheduled/workflow_dispatch
          if [[ -z "$files" ]]; then
            files=$(find . -type f -iname Dockerfile)
          fi
          # Output as JSON array for matrix
          if [[ -z "$files" ]]; then
            echo '[]' > dockerfiles.json
          else
            jq -n --arg files "$files" '$files | split("\n")[:-1]' > dockerfiles.json
          fi

      - name: Set matrix
        id: set-matrix
        run: |
          files=$(cat dockerfiles.json)
          echo "matrix={\"dockerfile\":$files}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: discover-changed-dockerfiles
    if: ${{ fromJson(needs.discover-changed-dockerfiles.outputs.matrix).dockerfile != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-changed-dockerfiles.outputs.matrix) }}

    env:
      # Each image will use its own tag logic below
      DOCKERFILE_PATH: ${{ matrix.dockerfile }}

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive image name and context
        id: meta
        run: |
          context_path=$(dirname "${{ env.DOCKERFILE_PATH }}")
          # Use a safe image name based on path
          image_name=$(echo "$context_path" | sed 's|^\./||' | tr '/.' '-')
          echo "context_path=$context_path" >> $GITHUB_OUTPUT
          echo "image_name=$image_name" >> $GITHUB_OUTPUT

      - name: Set tags
        id: tags
        run: |
          # You can adjust tagging logic as needed (sha, date, etc)
          echo "tags=${{ env.REGISTRY }}/${{ github.repository_owner }}/public-docker/${{ steps.meta.outputs.image_name }}:latest,${{ env.REGISTRY }}/${{ github.repository_owner }}/public-docker/${{ steps.meta.outputs.image_name }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: "${{ steps.meta.outputs.context_path }}"
          file: "${{ env.DOCKERFILE_PATH }}"
          push: true
          tags: "${{ steps.tags.outputs.tags }}"
          provenance: true

      # Optionally, output info for logs
      - name: Show Image Info
        run: |
          echo "Image: ${{ steps.tags.outputs.tags }}"
